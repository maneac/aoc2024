name: Rust

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  AOC_SESSION_TOKEN: ""
  AOC_AES_KEY: ""

permissions:
  pull-requests: write

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            tarpaulin-target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install stable actions-rs toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Decrypt data for day
        env:
          AOC_AES_KEY: ${{ secrets.AOC_AES_KEY }}
        run: |
          cargo run -p fetch_day -- --decrypt-data

      - name: Format check
        run: |
          cargo fmt --all --check

      - name: Cargo error check
        run: |
          cargo check --workspace

      - name: Clippy PR error check
        uses: giraffate/clippy-action@v1
        if: github.event_name == 'pull_request'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: "github-pr-review"
          clippy_flags: --workspace --all-features -- -D clippy::all

      - name: Merge Clippy error check
        if: github.event_name != 'pull_request'
        run: |
          cargo clippy --workspace --all-features -- -D clippy::all

      - name: Cargo Tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: '--engine=llvm --packages "day_*" --skip-clean --benches --exclude-files "fetch_day/*,bin/*.rs,benches/*.rs" --target-dir ./tarpaulin-target -o xml'
          timeout: 120

      - name: Archive coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: cobertura.xml

      - name: Generate coverage report
        uses: irongut/CodeCoverageSummary@v1.2.0
        with:
          filename: cobertura.xml
          badge: true
          hide_branch_rate: true
          hide_complexity: true
          format: "markdown"
          output: "both"

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
